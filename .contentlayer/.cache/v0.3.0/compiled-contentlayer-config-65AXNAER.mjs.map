{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/config/rehype-pretty-code-options.ts", "../../../src/lib/remark-img-to-jsx.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport { s } from \"hastscript\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nimport { rehypePrettyCodeOptions } from \"./src/config/rehype-pretty-code-options\";\nimport remarkImgToJsx from \"./src/lib/remark-img-to-jsx\";\n\nconst Badge = defineNestedType(() => ({\n  name: \"Badge\",\n  fields: {\n    icon: {\n      type: \"string\",\n      description: \"The name of the icon to use\",\n      required: true,\n    },\n    label: {\n      type: \"string\",\n      description: \"The label of the badge\",\n      required: true,\n    },\n  },\n}));\n\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: \"projects/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    name: {\n      type: \"string\",\n      description: \"The name of the project\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the project\",\n      required: true,\n    },\n    homepage: {\n      type: \"string\",\n      description: \"The link to the project's homepage\",\n      required: false,\n    },\n    githubLink: {\n      type: \"string\",\n      description: \"The link to the project's github page\",\n      required: true,\n    },\n    iconName: {\n      type: \"string\",\n      description: \"The name of the icon to use\",\n      required: true,\n    },\n    image: {\n      type: \"string\",\n      description: \"Image for the project\",\n      required: true,\n    },\n    repoName: {\n      type: \"string\",\n      description: \"The name of the repo of the project\",\n      required: true,\n    },\n    badges: {\n      type: \"list\",\n      of: Badge,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: \"BlogPost\",\n  filePathPattern: \"blog/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the blog post\",\n      required: true,\n    },\n    date: {\n      type: \"string\",\n      description: \"The date of the blog post\",\n      required: true,\n    },\n    modifiedTime: {\n      type: \"string\",\n      description: \"The modified time of the blog post\",\n      required: true,\n    },\n    summary: {\n      type: \"string\",\n      description: \"The summary of the blog post\",\n      required: true,\n    },\n    image: {\n      type: \"string\",\n      description: \"Image for the blog post\",\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport const Pages = defineDocumentType(() => ({\n  name: \"Pages\",\n  filePathPattern: \"pages/**/*.mdx\",\n  contentType: \"mdx\",\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"src/contents\",\n  documentTypes: [Project, BlogPost, Pages],\n  mdx: {\n    remarkPlugins: [remarkGfm, remarkImgToJsx],\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypePrettyCode, rehypePrettyCodeOptions],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"absolute left-0 top-0 bottom-0 w-full group\"],\n          },\n          content: [\n            s(\n              \"svg\",\n              {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: 16,\n                height: 16,\n                fill: \"currentColor\",\n                className:\n                  \"invisible absolute top-1/2 right-full h-4 w-4 -translate-y-1/2 text-accent-6 group-hover:visible mr-2\",\n                viewBox: \"0 0 24 24\",\n              },\n              s(\"path\", {\n                d: \"M9.199 13.599a5.99 5.99 0 0 0 3.949 2.345 5.987 5.987 0 0 0 5.105-1.702l2.995-2.994a5.992 5.992 0 0 0 1.695-4.285 5.976 5.976 0 0 0-1.831-4.211 5.99 5.99 0 0 0-6.431-1.242 6.003 6.003 0 0 0-1.905 1.24l-1.731 1.721a.999.999 0 1 0 1.41 1.418l1.709-1.699a3.985 3.985 0 0 1 2.761-1.123 3.975 3.975 0 0 1 2.799 1.122 3.997 3.997 0 0 1 .111 5.644l-3.005 3.006a3.982 3.982 0 0 1-3.395 1.126 3.987 3.987 0 0 1-2.632-1.563A1 1 0 0 0 9.201 13.6zm5.602-3.198a5.99 5.99 0 0 0-3.949-2.345 5.987 5.987 0 0 0-5.105 1.702l-2.995 2.994a5.992 5.992 0 0 0-1.695 4.285 5.976 5.976 0 0 0 1.831 4.211 5.99 5.99 0 0 0 6.431 1.242 6.003 6.003 0 0 0 1.905-1.24l1.723-1.723a.999.999 0 1 0-1.414-1.414L9.836 19.81a3.985 3.985 0 0 1-2.761 1.123 3.975 3.975 0 0 1-2.799-1.122 3.997 3.997 0 0 1-.111-5.644l3.005-3.006a3.982 3.982 0 0 1 3.395-1.126 3.987 3.987 0 0 1 2.632 1.563 1 1 0 0 0 1.602-1.198z\",\n              })\n            ),\n          ],\n        },\n      ],\n    ],\n  },\n});\n", "import { Options } from \"rehype-pretty-code\";\n\nexport const rehypePrettyCodeOptions: Partial<Options> = {\n  theme: {\n    light: \"github-light\",\n    dark: \"github-dark\",\n  },\n  onVisitLine(node: any) {\n    // Prevent lines from collapsing in `display: grid` mode, and\n    // allow empty lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: \"text\", value: \" \" }];\n    }\n  },\n  onVisitHighlightedLine(node: any) {\n    node.properties.className.push(\"highlighted\");\n  },\n  onVisitHighlightedWord(node: any) {\n    node.properties.className = [\"word\"];\n  },\n};\n", "import fs from \"fs\";\nimport sizeOf from \"image-size\";\nimport { Literal, Node, Parent } from \"unist\";\nimport { visit } from \"unist-util-visit\";\n\ntype ImageNode = {\n  url: string;\n  alt: string;\n  name: string;\n  attributes: (Literal & { name: string })[];\n} & Parent;\n\nconst remarkImgToJsx = () => {\n  return (tree: Node) => {\n    visit(\n      tree,\n      (node: Parent): node is Parent =>\n        node.type === \"paragraph\" &&\n        node.children.some((n) => n.type === \"image\"),\n      (node: Parent) => {\n        const imageNode = node.children.find(\n          (n) => n.type === \"image\"\n        ) as ImageNode;\n\n        // only local files\n        if (fs.existsSync(`${process.cwd()}/public${imageNode.url}`)) {\n          const dimensions = sizeOf(`${process.cwd()}/public${imageNode.url}`);\n\n          imageNode.type = \"mdxJsxFlowElement\";\n          imageNode.name = \"Image\";\n          imageNode.attributes = [\n            { type: \"mdxJsxAttribute\", name: \"alt\", value: imageNode.alt },\n            { type: \"mdxJsxAttribute\", name: \"src\", value: imageNode.url },\n            {\n              type: \"mdxJsxAttribute\",\n              name: \"width\",\n              value: dimensions.width,\n            },\n            {\n              type: \"mdxJsxAttribute\",\n              name: \"height\",\n              value: dimensions.height,\n            },\n          ];\n\n          // Change node type from p to div to avoid nesting error\n          node.type = \"div\";\n          node.children = [imageNode];\n        }\n      }\n    );\n  };\n};\n\nexport default remarkImgToJsx;\n"],
  "mappings": "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",
  "names": []
}
